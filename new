import requests

def get_directions(api_key, waypoints):
    origin = waypoints[0]
    destination = waypoints[-1]
    waypoints_str = "|".join([f"{lat},{lng}" for lat, lng in waypoints[1:-1]])

    endpoint = "https://maps.googleapis.com/maps/api/directions/json"
    params = {
        "origin": f"{origin[0]},{origin[1]}",
        "destination": f"{destination[0]},{destination[1]}",
        "waypoints": f"via:{waypoints_str}",
        "key": api_key,
    }

    response = requests.get(endpoint, params=params)
    data = response.json()

    if data["status"] == "OK":
        return data["routes"][0]["legs"]
    else:
        print(f"Error: {data['status']}")
        return None

def calculate_energy_consumption(distance, efficiency):
    # Assuming a constant energy consumption rate (kWh/km)
    energy_consumed = distance * efficiency
    return energy_consumed

def main():
    api_key = "YOUR_GOOGLE_MAPS_API_KEY"
    waypoints = [
        (-36.8536098, 174.7664805),
        (-37.0089331, 174.7838064),
        (-36.9409461, 174.9039851),
        (-36.849963, 174.7560774),
    ]

    efficiency = 0.2  # Adjust as needed
    battery_level = 100.0  # Starting battery level

    while battery_level > 20.0:
        directions = get_directions(api_key, waypoints)

        if directions:
            total_distance = sum(leg["distance"]["value"] for leg in directions)
            print(f"Total Distance: {total_distance / 1000} km")

            # Retrieve travel duration
            total_duration = sum(leg["duration"]["value"] for leg in directions)
            print(f"Total Duration: {total_duration / 60} minutes")

            energy_consumed = calculate_energy_consumption(total_distance / 1000, efficiency)
            print(f"Energy Consumption: {energy_consumed} kWh")

            # Assuming the battery capacity is 60 kWh (adjust as needed)
            battery_capacity = 60.0
            battery_level -= (energy_consumed / battery_capacity) * 100.0
            print(f"Battery Level: {battery_level}%")

            # Update the starting point for the next route
            waypoints[0] = (directions[-1]["end_location"]["lat"], directions[-1]["end_location"]["lng"])
        else:
            break

if __name__ == "__main__":
    main()
