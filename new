import googlemaps

# Replace 'YOUR_API_KEY' with your actual Google Maps API key
API_KEY = 'YOUR_API_KEY'
gmaps = googlemaps.Client(key=API_KEY)

# Waypoints
waypoints = [
    (-36.8536098, 174.7664805),
    (-37.0089331, 174.7838064),
    (-36.9409461, 174.9039851),
    (-36.849963, 174.7560774)
]

# Energy consumption rate in watt-hours per kilometer
energy_consumption_rate = 200.0  # Replace with the actual energy consumption rate of the vehicle

# Battery specifications
battery_capacity = 60.0  # Replace with the actual capacity of the battery in kilowatt-hours
initial_soc = 80.0  # Replace with the actual initial state of charge in percentage

class Motor:
    def __init__(self, efficiency):
        self.efficiency = efficiency  # Efficiency of the motor (percentage)

    def calculate_energy_consumption(self, distance):
        # Calculate energy consumption based on distance and motor efficiency
        energy_consumption = distance * energy_consumption_rate / (self.efficiency / 100.0)
        return energy_consumption

class BatteryModule:
    def __init__(self, capacity, initial_soc):
        self.capacity = capacity  # Capacity of the battery module in kilowatt-hours
        self.soc = initial_soc  # State of charge of the battery module (percentage)

    def update_soc(self, energy_consumed):
        # Update state of charge based on energy consumed
        self.soc -= (energy_consumed / self.capacity) * 100.0
        self.soc = max(0.0, self.soc)  # Ensure the state of charge is not below 0

class ElectricVehicle:
    def __init__(self, motor, battery_module):
        self.motor = motor
        self.battery_module = battery_module

    def drive(self, distance):
        # Calculate energy consumption using the motor and update battery state of charge
        energy_consumption = self.motor.calculate_energy_consumption(distance)
        self.battery_module.update_soc(energy_consumption)
        return energy_consumption

# Initialize motor and battery module
efficiency_of_motor = 90.0  # Replace with the actual efficiency of the motor in percentage
motor = Motor(efficiency_of_motor)
battery = BatteryModule(battery_capacity, initial_soc)

# Initialize the electric vehicle
ev = ElectricVehicle(motor, battery)

# Initialize variables
current_location = waypoints[0]
total_distance = 0.0
total_duration = 0.0

# Iterate through waypoints
for i in range(len(waypoints) - 1):
    start_point = current_location
    end_point = waypoints[i + 1]

    # Calculate distance and duration between two points
    result = gmaps.distance_matrix(start_point, end_point, mode="driving")
    distance = result['rows'][0]['elements'][0]['distance']['value']
    duration = result['rows'][0]['elements'][0]['duration']['value']

    # Drive the electric vehicle and get energy consumption
    energy_consumption = ev.drive(distance / 1000.0)

    # Update total distance, total duration, and current location for the next iteration
    total_distance += distance
    total_duration += duration
    current_location = end_point

    # Print results for the current trip
    print(f'Trip {i + 1}:')
    print(f'Origin: {start_point}')
    print(f'Destination: {end_point}')
    print(f'Distance: {distance / 1000.0:.2f} kilometers')
    print(f'Traveling time: {duration / 60:.2f} minutes')
    print(f'Energy consumption: {energy_consumption:.2f} watt-hours')
    print(f'Battery SoC: {ev.battery_module.soc:.2f}%\n')

# Convert total distance to kilometers
total_distance_km = total_distance / 1000.0

# Print total results
print(f'Total distance traveled: {total_distance_km:.2f} kilometers')
print(f'Total traveling time: {total_duration / 60:.2f} minutes')
print(f'Final Battery SoC: {ev.battery_module.soc:.2f}%')
