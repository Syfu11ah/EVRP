import googlemaps
import time
import math

# Replace 'YOUR_API_KEY' with your actual Google Maps API key
API_KEY = 'YOUR_API_KEY'
gmaps = googlemaps.Client(key=API_KEY)

# Waypoints
waypoints = [
    (-36.8536098, 174.7664805),
    (-37.0089331, 174.7838064),
    (-36.9409461, 174.9039851),
    (-36.849963, 174.7560774)
]

# Vehicle parameters
vehicle_mass = 1500.0  # Mass of the vehicle in kg
gravitational_acceleration = 9.81  # Gravitational acceleration in m/s^2
rolling_resistance_coefficient = 0.01  # Rolling resistance coefficient
drag_coefficient = 0.3  # Drag coefficient
frontal_area = 2.0  # Frontal area of the vehicle in m^2
average_speed = 20.0  # Average speed of the vehicle in m/s (for duration calculation)

# Battery specifications
battery_capacity = 60.0  # Replace with the actual capacity of the battery in kilowatt-hours
initial_soc = 80.0  # Replace with the actual initial state of charge in percentage

class ElectricVehicle:
    def __init__(self, battery_capacity, initial_soc):
        self.battery_capacity = battery_capacity
        self.soc = initial_soc

    def drive(self, distance, acceleration, gradient_angle, velocity):
        # Calculate energy consumption and update battery state of charge
        energy_consumption = (
            (vehicle_mass * acceleration + 
             vehicle_mass * gravitational_acceleration * math.sin(math.radians(gradient_angle)) +
             vehicle_mass * gravitational_acceleration * rolling_resistance_coefficient * math.cos(math.radians(gradient_angle)) +
             0.5 * drag_coefficient * frontal_area * 1.225 * velocity**2) * distance
        ) / 3600  # Convert energy from J to Wh

        # Limit energy consumption to remaining battery capacity
        energy_consumption = min(energy_consumption, self.soc * self.battery_capacity / 100.0)

        self.soc -= (energy_consumption / self.battery_capacity) * 100.0
        self.soc = max(0.0, self.soc)  # Ensure the state of charge is not below 0
        return energy_consumption

def get_distance(point1, point2):
    # Haversine formula to calculate distance between two points on the Earth
    lat1, lon1 = math.radians(point1[0]), math.radians(point1[1])
    lat2, lon2 = math.radians(point2[0]), math.radians(point2[1])

    dlat = lat2 - lat1
    dlon = lon2 - lon1

    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    # Radius of the Earth in kilometers (mean value)
    radius_earth = 6371.0

    # Calculate the distance
    distance = radius_earth * c

    return distance

def get_elevation(location):
    # Get elevation data for a specific location
    result = gmaps.elevation([location])
    if result and 'elevation' in result[0]:
        return result[0]['elevation']
    else:
        return None

# Function to get detailed route information between two points
def get_detailed_route(start_point, end_point):
    directions_result = gmaps.directions(
        start_point, end_point,
        mode="driving",
        departure_time="now"
    )
    return directions_result

# Initialize the electric vehicle
ev = ElectricVehicle(battery_capacity, initial_soc)

# Initialize variables
current_location = waypoints[0]
total_distance = 0.0
total_duration = 0.0
energy_consumption = 0.0

# Iterate through waypoints
for i in range(len(waypoints) - 1):
    start_point = current_location
    end_point = waypoints[i + 1]

    # Calculate distance between two points
    distance = get_distance(start_point, end_point)

    # Get the elevation at the start and end points
    start_elevation = get_elevation(start_point)
    end_elevation = get_elevation(end_point)

    if start_elevation is not None and end_elevation is not None:
        # Estimate road gradient_angle based on the difference in elevation
        gradient_angle = math.degrees(math.atan2(end_elevation - start_elevation, distance))

        # Calculate duration and velocity based on the distance
        duration = distance / average_speed  # Assuming constant speed for simplicity
        velocity = average_speed

        # Assume constant acceleration for simplicity (you may need a more sophisticated model)
        acceleration = 2.0  # m/s^2

        # Drive the electric vehicle and get energy consumption
        energy_consumption = ev.drive(distance, acceleration, gradient_angle, velocity)

        # Update total distance, total duration, and current location for the next iteration
        total_distance += distance
        total_duration += duration
        current_location = end_point

        # Calculate remaining battery capacity
        remaining_battery_capacity = ev.battery_capacity - (energy_consumption / 1000.0)  # Convert energy consumption to kilowatt-hours

        # Print results for the current trip
        print(f'Trip {i + 1}:')
        print(f'Origin: {start_point}')
        print(f'Destination: {end_point}')
        print(f'Distance: {distance:.2f} kilometers')  # Distance is now directly calculated
        print(f'Traveling time: {duration:.2f} minutes')
        print(f'Energy consumption: {energy_consumption:.2f} watt-hours')
        print(f'Battery SoC: {ev.soc:.2f}%')
        print(f'Initial Battery Capacity: {ev.battery_capacity:.2f} kWh')
        print(f'Remaining Battery Capacity: {remaining_battery_capacity:.2f} kWh\n')

        # Get and print detailed route information
        detailed_route = get_detailed_route(start_point, end_point)
        print(f'Detailed Route Instructions:')
        for leg in detailed_route[0]['legs']:
            for step in leg['steps']:
                print(f"Instruction: {step['html_instructions']}")
                print(f"Start Location: {step['start_location']}")
                print(f"End Location: {step['end_location']}")
                print('---')
        print('\n')

        # Introduce a delay of 2 minutes after each trip
        time.sleep(120)
    else:
        print(f'Error obtaining elevation data for trip {i + 1}. Skipping...\n')

# Convert total distance to kilometers
total_distance_km = total_distance

# Calculate remaining battery capacity after all trips
remaining_battery_capacity_total = ev.battery_capacity - (total_distance_km * energy_consumption / 1000.0)

# Print total results
print(f'Total distance traveled: {total_distance_km:.2f} kilometers')
print(f'Total traveling time: {total_duration:.2f} minutes')
print(f'Final Battery SoC: {ev.soc:.2f}%')
print(f'Total Initial Battery Capacity: {ev.battery_capacity:.2f} kWh')
print(f'Total Remaining Battery Capacity: {remaining_battery_capacity_total:.2f} kWh')
